{"version":3,"sources":["components/form/Input.js","components/form/Select.js","components/discs/DiscOptions.js","components/table/Cells.js","components/table/Table.js","components/Screenshot.js","App.js","serviceWorker.js","index.js"],"names":["Input","props","react_default","a","createElement","className","htmlFor","name","title","onChange","handleChange","bind","Select","defaultValue","value","disabled","placeholder","options","map","option","key","label","DiscOptions","onSubmit","this","handleSubmit","form_Input","form","form_Select","type","stability","React","Component","Cell","rows","forEach","v","push","Table","disc","Cells","data","putters","midranges","fairway","control","distance","k","selectedDiscs","j","renderCell","Screenshot","onClick","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","takeScreenshot","e","canvas","document","getElementsByTagName","body","removeChild","html2canvas","then","appendChild","state","STATE","screenshotElement","createRef","assertThisInitialized","event","target","setState","updater","objectSpread","defineProperty","concat","toConsumableArray","alert","preventDefault","_this2","table_Table","ref","element","discs_DiscOptions","components_Screenshot","Boolean","window","location","hostname","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.830f9bd7.chunk.js","sourcesContent":["import React from 'react';\n\nconst Input = (props) => {\n  return (\n    <div className=\"form-group\">\n      <label htmlFor={ props.name }> { props.title }</label>\n      <input\n        name={ props.name }\n        onChange={ props.handleChange.bind(this) }>\n      </input>\n    </div>\n  )\n}\n\nexport default Input;\n","import React from 'react';\n\nconst Select = (props) => {\n  return (\n    <div className=\"form-group\">\n      <label htmlFor={ props.name }> { props.title }</label>\n      <select\n        name={ props.name }\n        defaultValue={ props.value }\n        onChange={ props.handleChange.bind(this) }>\n        <option value=\"\" disabled>{ props.placeholder }</option>\n        { props.options.map(option => {\n          return (\n            <option\n              key={ option.title }\n              value={ option.value }\n              label={ option.title }>{ option.title }\n            </option>\n          );\n        })}\n      </select>\n    </div>\n  )\n}\n\nexport default Select;\n","import React from \"react\";\n\nimport Input from '../form/Input';\nimport Select from '../form/Select';\n\nclass DiscOptions extends React.Component {\n  render() {\n    const types = [\n      { title: 'Putter', value: 'putters' },\n      { title: 'Midrange', value: 'midranges' },\n      { title: 'Fairway', value: 'fairway' },\n      { title: 'Control', value: 'control' },\n      { title: 'Distance', value: 'distance' }\n    ];\n\n    const stabilities = [\n      { title: \"Very Overstable\", value: \"vos\" },\n      { title: \"Overstable\", value: \"os\" },\n      { title: \"Stable\", value: \"stable\" },\n      { title: \"Understable\", value: \"us\" },\n      { title: \"Very Understable\", value: \"vus\" },\n    ];\n\n    return (\n      <form\n        onSubmit={ this.props.handleSubmit }>\n        <Input\n          title = { 'Disc Name' }\n          value = { this.props.form.name }\n          name = { 'name' }\n          placeholder = { 'Choose disc' }\n          handleChange={ this.props.handleChange }>\n        </Input>\n        <Select\n          title = { 'Disc Type' }\n          value = { this.props.form.type }\n          name = { 'type' }\n          options = { types }\n          placeholder = { 'Choose disc type' }\n          handleChange={ this.props.handleChange }>\n        </Select>\n        <Select\n          title = { 'Disc Stability' }\n          value = { this.props.form.stability }\n          name = { 'stability' }\n          options = { stabilities }\n          placeholder = { 'Choose disc stability' }\n          handleChange={ this.props.handleChange }>\n        </Select>\n        <button type=\"submit\">Add Disc</button>\n      </form>\n    )\n  }\n}\n\nexport default DiscOptions;\n","import React from 'react';\n\nclass Cell extends React.Component {\n  render() {\n    let rows = [];\n\n    if (this.props.value) {\n      this.props.value.forEach((v) => (\n        rows.push(<p key={ v }>{ v }</p>)\n      ));\n    }\n\n    return <td className=\"cell\">{ rows }</td>;\n  }\n}\n\nexport default Cell;\n","import React from 'react';\nimport Cell from './Cells';\n\nclass Table extends React.Component {\n  renderCell(value) {\n    const disc = value;\n\n    return (\n      <Cell \n        value={ disc } />\n    )\n  }\n\n  render() {\n    const data = this.props;\n\n    let rows = {\n      putters: [],\n      midranges: [],\n      fairway: [],\n      control: [],\n      distance: []\n    }\n\n    for (let k in data.selectedDiscs) {\n      for (let j in data.selectedDiscs[k]) {\n        rows[k].push(this.renderCell(data.selectedDiscs[k][j]));\n      }\n    }\n\n    return (\n      <table>\n        <thead>\n          <tr>\n            <th>Bag Matrix</th>\n            <th>Very OS</th>\n            <th>OS</th>\n            <th>Stable</th>\n            <th>US</th>\n            <th>Very US</th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr>\n            <th>Putter</th>\n            { rows.putters }\n          </tr>\n          <tr>\n            <th>Midrange</th>\n            { rows.midranges }\n          </tr>\n          <tr>\n            <th>Fairway</th>\n            { rows.fairway }\n          </tr>\n          <tr>\n            <th>Control</th>\n            { rows.control }\n          </tr>\n          <tr>\n            <th>Distance</th>\n            { rows.distance }\n          </tr>\n        </tbody>\n      </table>\n    );\n  }\n}\n\nexport default Table;\n","import React from \"react\";\nimport html2canvas from \"html2canvas\";\n\nclass Screenshot extends React.Component {\n  render() {\n    return (\n      <button \n        className=\"screenshotter\"\n        onClick={ this.props.onClick }\n        type=\"button\">\n        Take screenshot!\n      </button>\n    )\n  }\n}\n\nexport default Screenshot;\n","import React, { Component } from 'react';\nimport ReactDOM from \"react-dom\";\nimport html2canvas from 'html2canvas';\n\nimport DiscOptions from './components/discs/DiscOptions';\nimport Table from './components/table/Table';\nimport Screenshot from './components/Screenshot';\nimport './css/App.css';\nimport STATE from './state.json';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = STATE;\n\n    this.screenshotElement = React.createRef();\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.takeScreenshot = this.takeScreenshot.bind(this);\n  }\n\n  handleChange(event) {\n    const name = event.target.name;\n    const value = event.target.value;\n\n    this.setState(updater => ({\n      form: {\n        ...updater.form,\n        [name]: value,\n      }\n    }));\n  }\n\n  handleSubmit(event) {\n    const name = this.state.form.name;\n    const type = this.state.form.type;\n    const stability = this.state.form.stability;\n\n    this.setState(updater => ({\n      selectedDiscs: {\n        ...updater.selectedDiscs,\n        [type]: {\n          ...updater.selectedDiscs[type],\n          [stability]: [\n            ...updater.selectedDiscs[type][stability],\n            name\n          ]\n        }\n      }\n    }), () => {\n      alert('Disc added!');\n    });\n\n    event.preventDefault();\n  }\n\n  takeScreenshot = e => {\n    const canvas = document.getElementsByTagName('canvas')[0];\n\n    if (canvas) {\n      document.body.removeChild(canvas);\n    }\n\n    html2canvas(document.getElementsByTagName('table')[0])\n      .then(function(canvas) {\n        document.body.appendChild(canvas);\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header>\n        </header>\n        <main>\n          <Table \n            ref = { element => this.screenshotElement = element }\n            selectedDiscs={ this.state.selectedDiscs } />\n          <DiscOptions\n            form={ this.state.form }\n            handleSubmit={ this.handleSubmit }\n            handleChange={ this.handleChange } />\n          <Screenshot\n            onClick={ this.takeScreenshot } />\n        </main>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}